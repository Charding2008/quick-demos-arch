# Listen directive has IP as first level of specificity, not the port, so for a request to:
# http://10.1.1.99 would be matched by the second server context.
# Also, the second server context assumes the sensible default of port 80.
server {
    listen 0.0.0.0:80;
}

server {
    listen 10.1.1.99;
}

# The next two server contexts listen on same IP and port, so we need the server_name
# directive to differentiate, which tells nginx to inspect the host header field.
server {
    listen 10.1.1.99:8080;
    server_name example-1.com;
}

server {
    listen 10.1.1.99:8080;
    server_name example-2.com;
}

# The next six server contexts show the selection order for server_name. 
# A request for http://www.example.com would match these in top down order.  
# The first server context would win, but if it weren't there, then the 2nd
# win, and so on.
server {
    listen 10.1.1.99:8080;
    # exact match:
    server_name www.example.com;
}

server {
    listen 10.1.1.99:8080;
    # leading wildcard:
    server_name *.example.com;
}

server {
    listen 10.1.1.99:8080;
    # leading wildcard,less specific:
    server_name *.com;
}

server {
    listen 10.1.1.99:8080;
    # trailing wildcard:
    server_name www.example.*;
}

server {
    listen 10.1.1.99:8080;
    # regex match:
    server_name ~^(www|host1|subdomain).example.com;
}

server {
    listen 10.1.1.99:8080 default_server;
    # if all else fails, use 'default_server':
    error_page 404 /40x.html;
}

# Use the location block directive (optionally) to define what to do with a 
# matching request.  For http://www.example.com/app1?arg=1245df ...
# Server Directive = http://www.example.com ... and ...
# Location Directive = app1?arg=1245df
# You can use location modifiers like:
# ~ (case sensitive regex) 
# ~* (case insensitive regex) 
# ^* (prevent regex matching)
server {
    listen 10.1.1.99:8080;
    server_name www.example.com;
    # a 'prefix' location.  Longest match wins, order doesn't matter.
    location /app1 {
    }
    # a 'regex' location. These match top-down.  So try and match early to stop futher processing.
    location ~* ^/app(/d+)$ {
    }
    # a 'prefix' location, preventing it from being treated as regex.
    location ^~ /app1/sub2 {
    }
}

# Logging example:

log_format custom "Request: $request_uri\nStatus: $status\nBackend-Address: $upstream_addr";
server {
    listen 10.1.1.99:8080;
    server_name example.com;
    # error_log /var/log/nginx info; 
    # Instead of above ^ ...
    # Default name for error log is error_log.log, so better to use a name that matches server_name
    # like this:
    error_log /var/log/nginx/example.com_info.log info; 
    # Line below uses default 'combined' format for access logs
    access_log /var/log/nginx/access.log combined;
    location /private {
        # Line below uses default 'custom' format defined above (log_format ...)
        access_log /var/log/nginx/private_access.log custom;
    }
}
# It is possible to log in json foramt - see docs for more details (log_format custom_json)
#--------------------
# Proxy examples:

server {
    listen 8082;
    server_name www.example.com;

    location /match-path {
        proxy_pass http://192.168.1.1:8082;
        # For request http://www.example.com/match-path/index.php
        # destination rewritten as http://192.168.1.1:8082/match-path/index.php;
        # i.e. proxy_pass without a path, preserves request path.
    }
    location /other-path/ {
        proxy_pass http://192.168.1.1:8082/otherapp/;
        # For request http://www.example.com/other-path/index.php
        # destination rewritten as http://192.168.1.1:8082/otherapp/index.php;
        # i.e. proxy_pass with a path, replaces the part of the path matched by 'location' directive.
    }
}
# By default NGINX proxy replaces two headers:  Host & Connection.
#

server {
    listen 8083;
    server_name www.example.com;
    # below adds header destined for client
    add_header my-custom-header my-value;
    location /another-path/ {
        proxy_pass http://192.168.1.1:8082/;
        # below modifies headers sent to the upstream
        proxy_set_header Host $host;

    }
}

# Example using TLS 
server {
    listen 443;
    server_name www.example.com;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;
    ssl_prefer_server_ciphers on;

    location /secure-path/ {
    }
}
# Controlling access
server {
    listen 10.1.1.99:8085;
    root /home/ubuntu/public_html;
    server_name www.example.com;

    auth_basic "restricted server";
    auth_basic_user_file /etc/nginx/htpasswd;
    # The file must be encrypted using the cryp() function fromn apache or
    # the openssl passwd commannd. The file format is as follows:
    # username1:password1
    # username2:password2
    # username3:password3

    location /app1 {
        auth_basic off;
        deny 10.0.10.0/24;
        allow 10.0.0.0/8;
        deny all;

    location /video {
        limit_conn ip 5;
        limit_req zone=one burst=15;
        limit_rate_after 500k;
        limit_rate 50k;
        limit_except GET POST

    }

# HTTP Load-balancing example:
server {
    listen 8086;
    server_name www.example.com;

    location /to-be-load-balanced/ {
        proxy_pass http://myUpstreamPool;
    }
}
upstream myUpstreamPool {
    # By default, NGINX uses weighted round-robin LB, if no method is specified.
    server member1 weight=8 max_fails=10 fail_timeout=90s;
    server member2 weight=4 max_fails=50 fail_timeout=60s;
    server member3 weight=4 max_fails=50 fail_timeout=60s;
    server member4 weight=1
}

# TCP Load-balancing example:

stream {
    server {
        listen 25;
            proxy_pass smtp;
        }
    }
    upstream smtp {
        least_conn;
            server smtp1;
            server smtp2;
    }
}