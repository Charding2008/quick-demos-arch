---

- name: GET EC2 FACTS
  ec2_instance_facts:
    filters:
      "tag:stack": "{{ stack_name }}"
      "tag:UK-SE": "{{ uk_se_name }}"
      "tag:automated": "{{ automation_tool }}"
  register: ec2_instance_facts
  ignore_errors: True


- name: OUTPUT DISCOVERED INSTANCE ID
  debug:
    msg: "WILL DELETE INSTANCE ID: {{ ec2_instance_facts }}"


- name: DELETE NGINX EC2 INSTANCE
  ec2:
    state: absent
    wait: yes
    instance_ids: "{{ item.instance_id }}"
    instance_tags:
      automated: "{{ automation_tool }}"
      stack: "{{ stack_name }}"
      UK-SE: "{{ uk_se_name }}"
  loop: "{{ ec2_instance_facts.instances }}"


- name: DELETE POSTGRES SQL IN AWS RDS
  local_action:
    module: rds
    command: delete
    instance_name: "{{ uk_se_name }}-nginx-c3-rds-postgres-9-5-19"
    region: "{{ aws_region }}"
    wait: yes
    wait_timeout: 600
  register: rds_info


- name: DELETE RDS SUBNET GROUP
  rds_subnet_group:
    state: absent
    name: "{{ uk_se_name }}-rds-sg"


- name: GET VPC ID USING TAGS DEFINED DURING AUTOMATED BUILD
  ec2_vpc_net_facts:
    region: "{{ aws_region }}"
    filters:
      "tag:stack": "{{ stack_name }}"
      "tag:UK-SE": "{{ uk_se_name }}"
      "tag:automated": "{{ automation_tool }}"
  register: vpc_facts
  ignore_errors: True


- name: OUTPUT VPC ID
  debug:
    msg: "Identified VPC: {{ vpc_facts.vpcs[0].vpc_id }}. This will be deleted."
  ignore_errors: True


- name: DELETE INTERNET GATEWAY
  ec2_vpc_igw:
    vpc_id: "{{ vpc_facts.vpcs[0].vpc_id }}"
    state: absent
  ignore_errors: True


- name: DELETE VPC SUBNETS
  ec2_vpc_subnet:
    vpc_id: "{{ vpc_facts.vpcs[0].vpc_id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ item.az }}"
    state: absent
  with_items: "{{ vpc_subnets }}"
  ignore_errors: True


- name: DELETE ROUTE TABLE
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_facts.vpcs[0].vpc_id }}"
    tags:
      automated: "{{ automation_tool }}"
      stack: "{{ stack_name }}"
      UK-SE: "{{ uk_se_name }}"
    state: absent
  ignore_errors: True


- name: CREATE SECURITY GROUP FOR PUBLIC SUBNET
  ec2_group:
    state: absent
    name: "nginx-sg"
  ignore_errors: True


- name: DELETE VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}" 
    state: absent
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ aws_region }}"
  ignore_errors: True


#------------------------------------------------------------------------------
# CREATE NEW RANDOM ID FOR NEXT TIME
#------------------------------------------------------------------------------


- name: GENERATE NEW RANDOM ID FOR NEXT CENTOS INSTANCE (WHEN YOU USE MAIN PLAYBOOK)
  set_fact:
    random: "{{ 9999 | random }}"


- name: WRITE RANDOM ID TO FILE FOR NEXT CENTOS INSTANCE (WHEN YOU USE MAIN PLAYBOOK)
  blockinfile:
    path: "./vars/id.yaml"
    marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    create: yes
    block: |
      # USED FOR SEMI-TEMPORARY ID FOR CENTOS INSTANCE, SO IT CAN REMAIN IDEMPOTENT
      # ONCE INSTANCE WITH ID IS DELETED, IT CANNOT BE REUSED WITHIN 24 HOURS
      centos_app_id: "{{ random }}"

...